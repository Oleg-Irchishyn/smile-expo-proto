/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// wrap

// safe

// real proto method for `library`

/* 1 */

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

/* 2 */

/* 3 */

/* 4 */

/* 5 */

/* 6 */

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

/* 7 */

/* 8 */

// Thank's IE8 for his funny defineProperty

/* 9 */

/* empty */

/* 10 */

// 7.1.13 ToObject(argument)

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

// to indexed object, toObject with fallback for non-array-like ES3 strings

/* 16 */

// eslint-disable-next-line no-useless-call

/* 17 */

// optional / simple context binding

/* 18 */

/* 19 */

// 7.1.4 ToInteger

/* 20 */

/* 21 */

// most Object methods by ES6 should accept primitives

/* 22 */

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

/* 23 */

/* 24 */

// 7.2.1 RequireObjectCoercible(argument)

/* 25 */

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , thisArg */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

/* 26 */

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

/* 27 */

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

/* 28 */

/* 29 */

/* 30 */

/* 31 */

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

/* 32 */

/* 33 */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

/* 34 */

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

/* 35 */

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/* 36 */

// 22.1.3.31 Array.prototype[@@unscopables]

/* 37 */

/* 38 */

/* 39 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins

/* 45 */

/* 46 */

// getting tag from 19.1.3.6 Object.prototype.toString()

/* 47 */

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

/* 48 */

/* 49 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// eslint-disable-next-line no-self-compare

// Array#indexOf ignores holes, Array#includes - not

/* 50 */

/* 51 */

// 7.2.2 IsArray(argument)

/* 52 */

// eslint-disable-next-line no-throw-literal

/* 53 */

// 21.2.5.3 get RegExp.prototype.flags

/* 54 */

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

/* 55 */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

/* 56 */

// fast case for arrays with default iterator

/* 57 */

/* 58 */

// V8 ~ Chromium 42- fails only with 5+ elements

// early implementations not supports chaining

// weak collections should not contains .clear method

// create collection constructor

/* 59 */

/* 60 */

/* 61 */

/* 62 */

/* 63 */

// IE 8- don't enum bug keys

/* 64 */

/* 65 */

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

/* 66 */

/* 67 */

/* 68 */

/* 69 */

// 20.2.2.28 Math.sign(x)

/* 70 */

// 20.2.2.14 Math.expm1(x)

/* 71 */

// true  -> String#at

// false -> String#codePointAt

/* 72 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

/* 73 */

// helper for String#{startsWith, endsWith, includes}

/* 74 */

// 7.2.8 IsRegExp(argument)

/* 75 */

/* 76 */

// check on default Array iterator

/* 77 */

/* 78 */

/* 79 */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

/* 80 */

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// target

// next index

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

/* 81 */

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/* 82 */

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* 83 */

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// eslint-disable-next-line no-new-func

// Node.js 0.8-

/* 84 */

// IEEE754 conversions based on https://github.com/feross/ieee754

// iOS Safari 7.x bug

/* , littleEndian */

/* 85 */

/* 86 */

/* 87 */

/* 88 */

/* 89 */

/* 90 */

// Don't enum bug & hidden keys

/* 91 */

/* 92 */

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

/* 93 */

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

/* 94 */

// 7.2.9 SameValue(x, y)

/* 95 */

/* , ...args */

/* 96 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/* 97 */

/* 98 */

/* 99 */

/* 100 */

// 20.1.2.3 Number.isInteger(number)

/* 101 */

// 20.2.2.20 Math.log1p(x)

/* 102 */

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

/* 103 */

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

/* 104 */

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

/* 105 */

/* 106 */

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

/* = 0 */

/* = 0, end = @length */

/* 107 */

/* 108 */

/* 109 */

// 21.2.5.3 get RegExp.prototype.flags()

/* 110 */

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// may throw

// variable length - can't use forEach

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// unwrap

// constructor polyfill

// 25.4.3.1 Promise(executor)

// eslint-disable-next-line no-unused-vars

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/* 111 */

// 25.4.1.5 NewPromiseCapability(C)

/* 112 */

/* 113 */

// fast case

// frozen object case

// collection type

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

/* , that = undefined */

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

/* 114 */

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

/* 115 */

// https://tc39.github.io/ecma262/#sec-toindex

/* 116 */

// all object keys, includes non-enumerable and symbols

/* 117 */

// https://github.com/tc39/proposal-string-pad-start-end

/* 118 */

/* 119 */

/* 120 */

/* 121 */

/* 122 */

/* 123 */

/* 124 */

/* 125 */

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/* 126 */

/* 127 */

// all enumerable object keys, includes symbols

/* 128 */

/* 129 */

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

/* 130 */

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

/* 131 */

/* 132 */

// 19.1.2.9 Object.getPrototypeOf(O)

/* 133 */

// 19.1.2.14 Object.keys(O)

/* 134 */

/* 135 */

// 19.1.2.5 Object.freeze(O)

/* 136 */

// 19.1.2.17 Object.seal(O)

/* 137 */

// 19.1.2.15 Object.preventExtensions(O)

/* 138 */

// 19.1.2.12 Object.isFrozen(O)

/* 139 */

// 19.1.2.13 Object.isSealed(O)

/* 140 */

// 19.1.2.11 Object.isExtensible(O)

/* 141 */

// 19.1.3.1 Object.assign(target, source)

/* 142 */

// 19.1.3.10 Object.is(value1, value2)

/* 143 */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

/* 144 */

// 19.1.3.6 Object.prototype.toString()

/* 145 */

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

/* 146 */

// 19.2.4.2 name

/* 147 */

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

/* 148 */

// 18.2.5 parseInt(string, radix)

/* 149 */

// 18.2.4 parseFloat(string)

/* 150 */

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

/* 151 */

// V8 ~ Android 4.3-

/* 152 */

// IE7-

/* 153 */

// 20.1.2.1 Number.EPSILON

/* 154 */

// 20.1.2.2 Number.isFinite(number)

/* 155 */

/* 156 */

// 20.1.2.4 Number.isNaN(number)

/* 157 */

// 20.1.2.5 Number.isSafeInteger(number)

/* 158 */

// 20.1.2.6 Number.MAX_SAFE_INTEGER

/* 159 */

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* 160 */

// 20.1.2.12 Number.parseFloat(string)

/* 161 */

// 20.1.2.13 Number.parseInt(string, radix)

/* 162 */

// 20.2.2.3 Math.acosh(x)

/* 163 */

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

/* 164 */

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/* 165 */

// 20.2.2.9 Math.cbrt(x)

/* 166 */

// 20.2.2.11 Math.clz32(x)

/* 167 */

// 20.2.2.12 Math.cosh(x)

/* 168 */

/* 169 */

// 20.2.2.16 Math.fround(x)

/* 170 */

/* 171 */

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/* 172 */

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

/* 173 */

// 20.2.2.21 Math.log10(x)

/* 174 */

/* 175 */

// 20.2.2.22 Math.log2(x)

/* 176 */

/* 177 */

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* 178 */

// 20.2.2.33 Math.tanh(x)

/* 179 */

// 20.2.2.34 Math.trunc(x)

/* 180 */

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

/* 181 */

// 21.1.2.4 String.raw(callSite, ...substitutions)

/* 182 */

// 21.1.3.25 String.prototype.trim()

/* 183 */

// 21.1.3.27 String.prototype[@@iterator]()

/* 184 */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* 185 */

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

/* 186 */

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

/* , position = 0 */

/* 187 */

// 21.1.3.13 String.prototype.repeat(count)

/* 188 */

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* 189 */

// B.2.3.2 String.prototype.anchor(name)

/* 190 */

// B.2.3.3 String.prototype.big()

/* 191 */

// B.2.3.4 String.prototype.blink()

/* 192 */

// B.2.3.5 String.prototype.bold()

/* 193 */

// B.2.3.6 String.prototype.fixed()

/* 194 */

// B.2.3.7 String.prototype.fontcolor(color)

/* 195 */

// B.2.3.8 String.prototype.fontsize(size)

/* 196 */

// B.2.3.9 String.prototype.italics()

/* 197 */

// B.2.3.10 String.prototype.link(url)

/* 198 */

// B.2.3.11 String.prototype.small()

/* 199 */

// B.2.3.12 String.prototype.strike()

/* 200 */

// B.2.3.13 String.prototype.sub()

/* 201 */

// B.2.3.14 String.prototype.sup()

/* 202 */

// 20.3.3.1 / 15.9.4.4 Date.now()

/* 203 */

/* 204 */

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

/* 205 */

/* 206 */

/* 207 */

/* 208 */

/* 209 */

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

/* 210 */

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/* 211 */

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

/* 212 */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

/* 213 */

// fallback for not array-like ES3 strings and DOM objects

/* 214 */

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* 215 */

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

/* 216 */

// cross-realm fallback

/* 217 */

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

/* 218 */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* 219 */

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

/* 220 */

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

/* 221 */

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

/* 222 */

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

/* 223 */

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

/* 224 */

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

/* 225 */

/* 226 */

/* 227 */

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// Shouldn't skip holes

/* 228 */

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

/* 229 */

/* 230 */

// RegExp constructor can alter flags and IsRegExp works correct with @@match

/* 231 */

// 21.2.5.14 RegExp.prototype.toString()

/* 232 */

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

/* 233 */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

/* 234 */

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/* 235 */

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

//

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

/* 236 */

// Node.js

// browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

/* 237 */

/* 238 */

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

/* 239 */

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

/* 240 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

/* 241 */

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

/* 242 */

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

/* 243 */

/* 244 */

/* 245 */

/* 246 */

/* 247 */

/* 248 */

/* 249 */

/* 250 */

/* 251 */

/* 252 */

/* 253 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* 254 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

/* 255 */

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

/* 256 */

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* 257 */

// 26.1.5 Reflect.enumerate(target)

// keys

/* 258 */

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

/* 259 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

/* 260 */

// 26.1.8 Reflect.getPrototypeOf(target)

/* 261 */

// 26.1.9 Reflect.has(target, propertyKey)

/* 262 */

// 26.1.10 Reflect.isExtensible(target)

/* 263 */

// 26.1.11 Reflect.ownKeys(target)

/* 264 */

// 26.1.12 Reflect.preventExtensions(target)

/* 265 */

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

/* 266 */

// 26.1.14 Reflect.setPrototypeOf(target, proto)

/* 267 */

/* 268 */

// https://github.com/tc39/Array.prototype.includes

/* 269 */

/* 270 */

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

/* 271 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/* 272 */

/* 273 */

/* , fillString = ' ' */

/* 274 */

/* 275 */

/* 276 */

/* 277 */

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

/* 278 */

/* 279 */

/* 280 */

/* 281 */

/* 282 */

/* 283 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

/* 284 */

/* 285 */

// https://github.com/tc39/proposal-object-values-entries

/* 286 */

/* 287 */

/* 288 */

/* 289 */

// https://github.com/tc39/proposal-promise-finally

/* 290 */

/* 291 */

// ie9- setTimeout & setInterval additional parameters fix

/* 292 */

/* 293 */

// TODO: Not spec compliant, should be false.

/* 294 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration.

// If a rejected Promise was yielded, throw the rejection back

// into the async generator function so it can be handled there.

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// Note: ["return"] must be used for ES3 parsing compatibility.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// Regardless of whether this script is executing as a CommonJS module

// or not, return the runtime object so that we can declare the variable

// regeneratorRuntime in the outer scope, which allows this module to be

// injected easily by `bin/regenerator --include-runtime script.js`.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// This module should not be running in strict mode, so the above

// assignment should always work unless something is misconfigured. Just

// in case runtime.js accidentally runs in strict mode, in modern engines

// we can explicitly access globalThis. In older engines we can escape

// strict mode using a global Function call. This could conceivably fail

// if a Content Security Policy forbids using Function, but in that case

// the proper solution is to fix the accidental strict mode problem. If

// you've misconfigured your bundler to force strict mode and applied a

// CSP to forbid Function, and you're not willing to fix either of those

// problems, please detail your unique predicament in a GitHub issue.

/* 295 */

/* 296 */

// https://github.com/tc39/proposal-global

/* 297 */

// prevent global pollution for namespaces

// make static versions for prototype methods

// export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

// export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

/* 298 */

/* 299 */

/* 300 */

/* 301 */

/* 302 */

/* 303 */

/* 304 */

/* 305 */

/* 306 */

/* 307 */

/* 308 */

/* 309 */

/* 310 */

/* 311 */

/* 312 */

/* 313 */

/* 314 */

/* 315 */

/* 316 */

/* 317 */

/* 318 */

/* 319 */

/* 320 */

/* 321 */

/* 322 */

/* 323 */

/* 324 */

/* 325 */

/* 326 */

/* 327 */

/* 328 */

/* 329 */

/* 330 */

/* 331 */

/* 332 */

/* 333 */

/* 334 */

/* 335 */

/* 336 */

/* 337 */

/* 338 */

/* 339 */

/* 340 */

/* 341 */

/* 342 */

/* 343 */

/* 344 */
